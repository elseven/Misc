/*To Do:
pulse to shoot ball before it hits paddle
power ups (back to back - go back and forth and same walls consecutively 10 times;
around the world - hit each wall consecutively;
power ups appear on screen - move ball through them to get power up
have cool sound effects for each power up, streaks, game over
how to switch
switch states - each switch calls a function for paddle
4 paddles - each has diff parameters
boolean for up/down and left/right paddle movement
graphics for each element
ball
paddle
pulse
contact with ball
background
levels
add obstacles
ball speeds up faster
smaller paddle
longer time
NEED
timer
increased stage size
http://www.flashgametuts.com/tutorials/as3/how-to-make-a-vertical-shooter-in-as3-part-1/
http://theflashconnection.com/content/player-shooting-bullets
http://www.flashgametuts.com/tutorials/as3/how-to-make-a-vertical-shooter-in-as3-part-2/
*/
import flash.display.Sprite;
import flash.media.Sound;
import flash.net.URLLoader;
import flash.net.URLRequest;
import flash.media.SoundChannel;
import flash.events.Event;
import flash.text.TextFormat;
import flash.text.TextField;
import flash.events.KeyboardEvent;
import flash.events.MouseEvent;

stage.frameRate = 30;
var stageWidth:int = 1000;
var stageHeight:int = 650;

var freezeFieldX:int;
var freezeFieldY:int;
//speed at which paddle moves when UP/DOWN/LEFT/RIGHT is pushed
var paddleSpeedIncrement:int = 40;


var freezeDuration:Number = 20;
var endFreeze:Number = -1;

var currentLevel:int = 1;


var gameTime:int;
var gameTimeSec:int;

//initial duration of time, i.e. what the timer starts at every time it's reset
var levelDuration:Number = 100;

//displays time on screen
var timeDisplay:TextField = new TextField();
var timeDisplayFormat:TextFormat=new TextFormat();
timeDisplayFormat.font = "Arial";
timeDisplayFormat.size = 18;
timeDisplay.background = true;
timeDisplay.backgroundColor = 0x00ff99;
timeDisplay.y = 0;
timeDisplay.x = ((stageWidth - timeDisplay.width)/2) - 50;
timeDisplay.autoSize = TextFieldAutoSize.CENTER;
timeDisplay.defaultTextFormat = timeDisplayFormat;
timeDisplay.setTextFormat(timeDisplayFormat);


//sets game timer to level duration;
gameTime = levelDuration;
var gameTimer:Timer = new Timer(100,levelDuration);
gameTimer.addEventListener(TimerEvent.TIMER, updateTime);
gameTimer.addEventListener(TimerEvent.TIMER_COMPLETE, timeExpired);

//used to determine position of paddle, i.e. what wall is it on?;
const LEFT:int = 1;
const RIGHT:int = 3;
const CEILING:int = 2;
const FLOOR:int = 4;

//wall that the paddle was on before being shifted
var previousState:int = FLOOR;
//wall that the paddle is shifting to
var currentState:int = FLOOR;

//used to allow for duplicates in playerName
//without, when the player enters the same playerName with the same score...
// the associative array doesn't allow duplicates, so it replaces the previous entry...
//or something like that
//adding the time creates a unique key to prevent the playerName from being a duplicate
var timeAsString:String = "";

//unix epoch time in milliseconds
var timeAsStringLength:int = 13;

//contains greeting that appears before game
var greetingContainer:Sprite=new Sprite();
addChild(greetingContainer);

//contains game elements
var gameContainer:Sprite=new Sprite();
var disappearTime : int = 0;
var blinkTime : int = 3;

//contains elements that appear after game over
var endGame:Sprite=new Sprite();

var txtFormat:TextFormat=new TextFormat();
txtFormat.font = "Arial";
txtFormat.size = 16;

//welcome message that appears before game
var greetingText:TextField=new TextField();
greetingText.x = ((stageWidth - greetingText.width)/2) - 20;
greetingText.y = ((stageHeight - greetingText.height)/2) - 100;
greetingText.background = true;
greetingText.backgroundColor = 0x00ddfc;
greetingText.text = "Hello Player,\n\nHit the ball with the paddle to earn points."+
"\nDon't let the ball exit the screen."+
"\n\nPress '1' to shift the paddle to the left wall"+
"\nPress '2' to shift the paddle to the top wall"+
"\nPress '3' to shift the paddle to the right wall"+
"\nPress '4' to shift the paddle to the bottom wall"+
"\nPress 'SPACE' to pause the game."+
"\n\nPress any button to begin";
greetingText.autoSize = TextFieldAutoSize.CENTER;
greetingText.setTextFormat(txtFormat);

//contains textfield that displays text between each level;
var betweenLevelContainer:Sprite = new Sprite();

//text that appears between each level
var levelChangeText:TextField=new TextField();
levelChangeText.x = ((stageWidth - levelChangeText.width) / 2);
levelChangeText.y = ((stageHeight - levelChangeText.height) / 2);
levelChangeText.background = true;
levelChangeText.backgroundColor = 0x00ddfc;
levelChangeText.text = "Level " + currentLevel.toString() + " is about to begin" +
"\nThe ball will now move faster" +
"\nPress any button to begin the level";
levelChangeText.autoSize = TextFieldAutoSize.CENTER;
levelChangeText.setTextFormat(txtFormat);

//ball;
var ball:Sprite = new Sprite();
ball.graphics.beginFill(0x0000FF);
ball.graphics.drawCircle(0,0,10);
gameContainer.addChild(ball);


//used to determine of paddle is horizontal or vertical;
//false = horizontal
//true = vertical
var isHorizontal:Boolean = false;

var paddleContainer:Sprite = new Sprite();
paddleContainer.x = 410;
paddleContainer.y = 615;
gameContainer.addChild(paddleContainer);

//paddle;
var paddle:Sprite=new Sprite();
paddle.graphics.beginFill(0xFF0000);
//paddle.graphics.drawRect(10,10,paddleWidth,paddleHeight);
paddle.graphics.drawRect(0,0,90,10);
paddleContainer.addChild(paddle);
paddle.focusRect = false;



var freezeContainer:Sprite = new Sprite();
freezeContainer.y = -1000;
var freezeLdr:Loader = new Loader();
var freezeURL:String = "ice.png";
var freezeURLReq:URLRequest = new URLRequest(freezeURL);
freezeLdr.load(freezeURLReq);
freezeLdr.contentLoaderInfo.addEventListener(Event.COMPLETE, freezeLoaded);


//freeze field;
var freezeField:Sprite = new Sprite();
freezeField.name = "freezeField";
freezeField.graphics.beginFill(0xaabbcc);
//freezeField.alpha = 0;
freezeField.graphics.drawRect(0,0,90,1000);
freezeField.y = -1000;

//ball movement increments
var xCircleAdd:Number = 5;
var yCircleAdd:Number = 5;

var hitSound:Sound= new Sound();
var urlReq:URLRequest = new URLRequest("beep-07.mp3");
hitSound.load(urlReq);

var leftSound:Sound=new Sound();
var leftUrlReq:URLRequest = new URLRequest("beep-02.mp3");
leftSound.load(leftUrlReq);

var rightSound:Sound = new Sound();
var rightUrlReq:URLRequest = new URLRequest("beep-03.mp3");
rightSound.load(rightUrlReq);

var upSound:Sound=new Sound();
var upUrlReq:URLRequest = new URLRequest("beep-09.mp3");
upSound.load(upUrlReq);

var downSound:Sound=new Sound();
var downUrlReq:URLRequest = new URLRequest("beep-10.mp3");
downSound.load(downUrlReq);

var gameSound:Sound=new Sound();
var gameUrlReq:URLRequest = new URLRequest("CutandRun.mp3");
gameSound.load(gameUrlReq);
var channel:SoundChannel = gameSound.play();
var pausePosition:int;

var scoreText:TextFormat=new TextFormat();
scoreText.font = "Arial";
scoreText.size = 18;


//displays score during game (score based on hitCount below)
var scoreDisplay:TextField=new TextField();
scoreDisplay.background = true;
scoreDisplay.backgroundColor = 0xffaaff;
scoreDisplay.y = 0;
scoreDisplay.x = ((stageWidth - scoreDisplay.width)/2) + 50;
scoreDisplay.autoSize = TextFieldAutoSize.CENTER;
scoreDisplay.text = "Score: " + hitCount.toString();
scoreDisplay.defaultTextFormat = scoreText;
scoreDisplay.setTextFormat(scoreText);


//appears when game is paused;
var pauseText:TextField=new TextField();
pauseText.x = 200;
pauseText.y = 200;
pauseText.text = "Game is paused.\nPress 'SPACE' to return to the game.";
pauseText.autoSize = TextFieldAutoSize.CENTER;
pauseText.setTextFormat(txtFormat);

//counter for number of times ball hits paddle;
var hitCount:int = 0;

//counts number of times ball hits bottom of screen
var lostBallCount:int = 0;

//high score list
var scoreArray:Array= new Array();

//high score names
var nameArray:Array=new Array();

var outputString:String=new String();

//combines player name (playerName) and player score (scoreArray) 
var associativeArray:Object=new Object();

//becomes true when there is a high score, otherwise false
var isHighScore:Boolean = false;

//appears with input field, gives instructions
var inputInstruct:TextField=new TextField();
inputInstruct.x = ((stageWidth - inputInstruct.width)/2) - 20;
inputInstruct.y = ((stageHeight - inputInstruct.height)/2) - 25;
inputInstruct.text = "Game over.\nType your name into the box\nthen press Enter";
inputInstruct.autoSize = TextFieldAutoSize.CENTER;
inputInstruct.setTextFormat(txtFormat);

//name that displays in high score;
var playerName:String;

//player types name into box
var inputFld:TextField = new TextField  ;
inputFld.width = 200;
inputFld.height = 50;
inputFld.x = ((stageWidth - inputFld.width)/2) - 20;
inputFld.y = ((stageHeight - inputFld.height)/2) + 25;
inputFld.border = true;
inputFld.type = TextFieldType.INPUT;

//text that appears after player inputs name
var endText:TextField=new TextField();
endText.x = 200;
endText.y = 50;
endText.autoSize = TextFieldAutoSize.CENTER;

//text that lists high scores (players name and their score) in descending order
var highScoreText:TextField=new TextField();
highScoreText.x = 200;
highScoreText.y = 120;
highScoreText.background = true;
highScoreText.backgroundColor = 0xffff00;
highScoreText.autoSize = TextFieldAutoSize.CENTER;

//red button that player clicks to restart game
var restartButton:Sprite=new Sprite();
restartButton.x = 200;
restartButton.y = 270;
restartButton.graphics.beginFill(0xff0000);
restartButton.graphics.drawRect(0,0,100,50);

//text that appears above restart button;
var restartButtonText:TextField=new TextField();
restartButtonText.x = 140;
restartButtonText.y = 245;
restartButtonText.text = "Click the button below to restart.";
restartButtonText.autoSize = TextFieldAutoSize.LEFT;
restartButtonText.setTextFormat(txtFormat);

inputFld.addEventListener(Event.CHANGE, inputFldChange);



inputFld.addEventListener(KeyboardEvent.KEY_DOWN, enterName);

//game starts when player presses any key;
greetingContainer.addEventListener(KeyboardEvent.KEY_DOWN, startGame);
greetingContainer.addChild(greetingText);

stage.focus = greetingText;
greetingText.focusRect = false;

channel.addEventListener(Event.SOUND_COMPLETE, onPlaybackComplete);


//game restarts when player clicks restartButton;
restartButton.addEventListener(MouseEvent.MOUSE_DOWN, restartGame);
//paddle movement;
paddleContainer.addEventListener(KeyboardEvent.KEY_DOWN,paddleMove);
paddleContainer.addEventListener(KeyboardEvent.KEY_DOWN, paddleShift);
paddleContainer.addEventListener(KeyboardEvent.KEY_DOWN, powers);
betweenLevelContainer.addChild(levelChangeText);
betweenLevelContainer.addEventListener(KeyboardEvent.KEY_DOWN, betweenText);







//==========================P O W E R S=============================//
function powers(event:KeyboardEvent):void
{

	//freeze field
	if (event.keyCode == 69)
	{
		//paddleContainer.addChild(freezeField);
		freezeFieldX = paddleContainer.x;
		freezeFieldY = paddleContainer.y;

		paddleContainer.addChild(freezeField);
		disappearTime = gameTime - blinkTime;

	}

	/*//pulse
	if (event.keyCode == 82)
	{
	trace("3 was pressed");
	currentState = RIGHT;
	newx = 980;
	freezeField.height = 970;
	freezeField.y = 10;
	}*/
}
function ballFreeze()
{
	
	
	if (ball.hitTestObject(freezeField))
	{
		hitSound.play();
		this.removeEventListener(Event.ENTER_FRAME, doEveryFrame);
		endFreeze = gameTime - freezeDuration;
		
	}
}



//===========================H I G H = S C O R E========================//

//displays high scores and restart message;
function enterName(event:KeyboardEvent):void
{
	if (event.keyCode == Keyboard.ENTER)
	{
		endGame.removeChild(inputFld);
		endGame.removeChild(inputInstruct);
		inputFld.removeEventListener(Event.CHANGE, inputFldChange);

		if (isHighScore)
		{

			//converts timeAsString to string and adds it to playerName in nameArray
			var today:Date=new Date();
			timeAsString = today.getTime().toString();
			nameArray.push(playerName + timeAsString);

			//see sortHighScores function for details;
			sortHighScores();

			//caps name and score Array lengths at 3
			if (scoreArray.length > 3)
			{
				scoreArray.shift();
				nameArray.shift();
			}

			endGame.addChild(restartButton);
			endGame.addChild(restartButtonText);

			endText.text = "Game over. \nCongratulations, " + playerName + "! " +
			"You got a high score.\nYour score: " + 
			hitCount.toString();

			highScoreText.text = "High Scores:\n" + outputString;

			endText.setTextFormat(txtFormat);
			highScoreText.setTextFormat(txtFormat);

			endGame.addChild(endText);
			endGame.addChild(highScoreText);
		}
		else
		{
			endGame.addChild(endText);
			endGame.addChild(restartButton);
			endGame.addChild(restartButtonText);

			endText.text = playerName + "," + " " +
			"bad news. You failed to achieve a high score.";

			highScoreText.text = "";

			highScoreText.setTextFormat(txtFormat);
			endText.setTextFormat(txtFormat);

			endGame.addChild(highScoreText);
		}
		//empties input field on restart
		inputFld.text = "";

		//resets isHighScore to false on restart
		isHighScore = false;
	}
}

function getArrayFromObject(inputObj : Object):Array
{
	var resultArray : Array = new Array();

	for (var i in inputObj)
	{
		resultArray.push({key:i, val:inputObj [i]});
	}
	return resultArray;
}

//sorts high scores in descending order
function sortHighScores()
{
	for (var i : int = 0; i < scoreArray.length; i++)
	{
		associativeArray[nameArray[i]] = scoreArray[i];
	}
	var sorted:Array = getArrayFromObject(associativeArray);

	sorted.sortOn("val", Array.NUMERIC | Array.DESCENDING);

	outputString = "";

	highScoreText.text = outputString;

	while (sorted.length > 3)
	{
		sorted.pop();
	}

	for (var m : int = 0; m < sorted.length; m++)
	{
		//takes playerName+time and removes time from displayed text
		var temp:String = sorted[m].key;
		temp = temp.substr(0,temp.length - timeAsStringLength);
		outputString = outputString + temp + ": " + sorted[m].val + "\n";
	}
}

//===========================M O V E M E N T===========================//

function paddleMove(event:KeyboardEvent):void
{

	//CEILING AND FLOOR
	if (currentState%2==0)
	{
		switch (event.keyCode)
		{

			case Keyboard.LEFT :
				if (paddleContainer.x > 0)
				{
					paddleContainer.x -=  paddleSpeedIncrement;
				}
				break;

			case Keyboard.RIGHT :
				if (paddleContainer.x + 10 < stage.stageWidth - paddle.width)
				{
					paddleContainer.x +=  paddleSpeedIncrement;
				}
				break;

		}

		//LEFT AND RIGHT
	}
	else
	{
		switch (event.keyCode)
		{
			case Keyboard.UP :
				if (paddleContainer.y > 0)
				{
					paddleContainer.y -=  paddleSpeedIncrement;
				}
				break;

			case Keyboard.DOWN :
				if (paddleContainer.y + 10 < stage.stageHeight - paddle.height)
				{
					paddleContainer.y +=  paddleSpeedIncrement;
				}
				break;
		}
	}


	//pauses game
	if (event.keyCode == Keyboard.SPACE)
	{
		if (this.hasEventListener(Event.ENTER_FRAME))
		{
			this.removeEventListener(Event.ENTER_FRAME, doEveryFrame);
			pausePosition = channel.position;
			channel.stop();
			gameTimer.stop();
			gameContainer.addChild(pauseText);
		}
		else
		{
			this.addEventListener(Event.ENTER_FRAME, doEveryFrame);
			channel = gameSound.play(pausePosition);
			gameContainer.removeChild(pauseText);
		}
		stage.focus = paddle;
	}
}

function paddleShift(event:KeyboardEvent):void
{

	if (event.keyCode > 52 || event.keyCode < 49)
	{
		return;
	}



	previousState = currentState;

	var newx:int = 0;
	var newy:int = 0;

	//ceiling
	if (event.keyCode == 50)
	{
		trace("2 was pressed");
		currentState = CEILING;
		newy = 25;
		freezeField.y = 10;
	}
	//floor
	if (event.keyCode == 52)
	{
		trace("4 was pressed");
		currentState = FLOOR;
		newy = 615;
		freezeField.y = -1000;
	}
	//left wall
	if (event.keyCode == 49)
	{
		trace("1 was pressed");
		currentState = LEFT;
		newx = 30;
		freezeField.y = -1000;
	}
	//right wall
	if (event.keyCode == 51)
	{
		trace("3 was pressed");
		currentState = RIGHT;
		newx = 980;
		freezeField.y = 10;
	}


	if (currentState % 2 == 0)
	{
		paddleContainer.rotation = 0;
	}
	else
	{
		paddleContainer.rotation = 90;
	}


	var tempSum:int = previousState % 2 + currentState % 2;

	//CEILING/FLOOR TO CEILING/FLOOR
	if (tempSum==0)
	{
		trace("c/f->c/f");
		paddleContainer.y = newy;

		//WALL TO WALL
	}
	else if (tempSum==2)
	{
		trace("wall->wall");
		paddleContainer.x = newx;
	}


	//wall to ceiling/floor
	if (previousState%2==1 && currentState%2==0)
	{
		trace("wall->c/f");
		paddleContainer.x = 410;
		paddleContainer.y = newy;

		//ceiling or floor to wall
	}
	else if (previousState%2==0 && currentState%2==1)
	{
		trace("c/f->wall");
		paddleContainer.x = newx;
		paddleContainer.y = 325;
	}


	debug(event);

}




//=========================H I T = T E S T S========================//
function ballHitsPaddle()
{
	if (ball.hitTestObject(paddle))
	{
		hitSound.play();
		hitCount++;
		//ball movement increases on impact with paddle
		if (currentState % 2 == 0)
		{
			yCircleAdd = yCircleAdd * -1;
			xCircleAdd = xCircleAdd * 1;
		}
		else
		{
			yCircleAdd = yCircleAdd * 1;
			xCircleAdd = xCircleAdd * -1;
		}
		scoreDisplay.text = "Score: " + hitCount.toString();
	}
}





//=======================E V E R Y = F R A M E & T I M E R=======================//

//time counts down by 1 every second;
function updateTime(e:TimerEvent):void
{
	//timer counts down by 1
	gameTime--;
	gameTimeSec=gameTime/10;
	//displays time on screen
	timeDisplay.text = "Time : " + String(gameTimeSec);
	
	
	unfreezeBall();
	hideFreezeField();

	
	
}

function hideFreezeField():void{
	if(gameTime < disappearTime){
		
		
		if(paddleContainer.getChildByName("freezeField")){
			trace("removing the freeze field");
			paddleContainer.removeChild(freezeField);
		}else{
			trace("already removed breh");
		}
		
	}
	
}

function unfreezeBall():void{
		if (gameTime < endFreeze)
	{
		//paddleContainer.removeChild(freezeField);
		endFreeze = -1;
		this.addEventListener(Event.ENTER_FRAME, doEveryFrame);
	}
}

function doEveryFrame(event:Event):void
{
	//currentState = FLOOR;
	gameTimer.start();
	ball.x +=  xCircleAdd;
	ball.y +=  yCircleAdd;

	ballHitsPaddle();
	ballFreeze();

	//ball hits right wall
	if (ball.x > stage.stageWidth - ball.width / 2)
	{
		downSound.play();
		ball.y = 20;
		ball.x = 20;
		xCircleAdd = 5;
		yCircleAdd = 5;
		lostBallCount++;
		if (lostBallCount==3)
		{
			//runs game over function
			gameOver();
		}
		else
		{//resets ball to top left corner
			ball.y = 20;
			ball.x = 20;
		}
	}
	//ball hits bottom wall
	if (ball.y > stage.stageHeight - ball.height / 2)
	{
		downSound.play();
		ball.y = 20;
		ball.x = 20;
		xCircleAdd = 5;
		yCircleAdd = 5;
		lostBallCount++;
		if (lostBallCount==3)
		{
			//runs game over function
			gameOver();
		}
		else
		{//resets ball to top left corner
			ball.y = 20;
			ball.x = 20;
		}
	}
	//ball hits left wall
	if (ball.x < ball.width / 2)
	{
		downSound.play();
		ball.y = 20;
		ball.x = 20;
		xCircleAdd = 5;
		yCircleAdd = 5;
		lostBallCount++;
		if (lostBallCount==3)
		{
			//runs game over function
			gameOver();
		}
		else
		{//resets ball to top left corner
			ball.y = 20;
			ball.x = 20;
		}
	}
	//ball hits top wall
	if (ball.y < ball.height / 2)
	{
		downSound.play();
		ball.y = 20;
		ball.x = 20;
		xCircleAdd = 5;
		yCircleAdd = 5;
		lostBallCount++;
		if (lostBallCount==3)
		{
			//runs game over function
			gameOver();
		}
		else
		{//resets ball to top left corner
			ball.y = 20;
			ball.x = 20;
		}
	}
}








//=========================S T A R T & S T O P==============================//



function startGame(event:KeyboardEvent):void
{
	removeChild(greetingContainer);
	addChild(gameContainer);
	isHorizontal = false;
	gameContainer.addChild(scoreDisplay);
	gameContainer.addChild(timeDisplay);
	stage.focus = paddle;
	this.addEventListener(Event.ENTER_FRAME, doEveryFrame);
	startLevel();
}

function restartGame(event:MouseEvent):void
{
	endGame.removeChild(endText);
	endGame.removeChild(restartButton);
	endGame.removeChild(restartButtonText);
	endGame.removeChild(highScoreText);
	channel = gameSound.play();
	lostBallCount = 0;
	hitCount = 0;
	gameTime = levelDuration;
	scoreDisplay.text = "Score: " + hitCount.toString();
	addChild(gameContainer);
	ball.y = 20;
	ball.x = 20;
	this.addEventListener(Event.ENTER_FRAME, doEveryFrame);
	stage.focus = paddle;
}
function startLevel()
{
	if (currentLevel == 1)
	{
		addChild(gameContainer);
		isHorizontal = false;
		gameContainer.addChild(scoreDisplay);
		gameContainer.addChild(timeDisplay);
		lostBallCount = 0;
		hitCount = 0;
		gameTime = levelDuration;
		scoreDisplay.text = "Score: " + hitCount.toString();
		ball.y = 20;
		ball.x = 20;
		this.addEventListener(Event.ENTER_FRAME, doEveryFrame);
		stage.focus = paddle;
	}
	else
	{
		removeChild(betweenLevelContainer);
		yCircleAdd = yCircleAdd * -1.5;
		xCircleAdd = xCircleAdd * 1.5;
		addChild(gameContainer);
		isHorizontal = false;
		gameContainer.addChild(scoreDisplay);
		gameContainer.addChild(timeDisplay);
		lostBallCount = 0;
		gameTime = levelDuration;
		scoreDisplay.text = "Score: " + hitCount.toString();
		ball.y = 20;
		ball.x = 20;
		this.addEventListener(Event.ENTER_FRAME, doEveryFrame);
		paddleContainer.addEventListener(KeyboardEvent.KEY_DOWN,paddleMove);
		stage.focus = paddle;
		gameTimer.reset();
	}

}



function timeExpired(e:TimerEvent):void
{
	
	trace("time expired");
	
	//var gameTimer:Timer = e.target as Timer;
	gameTimer.stop();
	//gameTimer.removeEventListener(TimerEvent.TIMER, updateTime);
	removeChild(gameContainer);
	paddleContainer.removeEventListener(KeyboardEvent.KEY_DOWN,paddleMove);
	this.removeEventListener(Event.ENTER_FRAME, doEveryFrame);
	channel.stop();
	addChild(betweenLevelContainer);
	stage.focus = levelChangeText;
	levelChangeText.setTextFormat(txtFormat);
}

//what happens  after ball hits bottom of screen 3 times
function gameOver()
{
	endGame.addChild(inputInstruct);
	endGame.addChild(inputFld);
	inputFld.addEventListener(Event.CHANGE, inputFldChange);
	//initializes scoreArray.length;
	if (scoreArray.length == 0)
	{
		scoreArray.push(0);
	}
	//initializes nameArray.length;
	if (nameArray.length == 0)
	{
		nameArray.push(0);
	}
	//checks for high score;
	for (var i=0; i<scoreArray.length; i++)
	{
		if (hitCount >= scoreArray[i])
		{
			isHighScore = true;
			//adds player's score to high score
			scoreArray.push(hitCount);
			//clears scoreArray;
			if (scoreArray[i] == 0)
			{
				scoreArray.shift();
			}
			//clears nameArray
			if (nameArray[i] == 0)
			{
				nameArray.shift();
			}
			break;
		}
	}
	removeChild(gameContainer);
	addChild(endGame);
	this.removeEventListener(Event.ENTER_FRAME, doEveryFrame);
	channel.stop();
}







//===========================G R A P H I C S=======================//

function freezeLoaded(event:Event):void
{
	trace("loaded");
	freezeContainer.addChild(freezeLdr.content);
	freezeContainer.scaleX = 90;
	freezeContainer.scaleY = 10;
}



//==========================O T H E R==============================//
//converts input text into name that will be placed into nameArray;
function inputFldChange(event:Event)
{
	playerName = inputFld.text;
}


function onPlaybackComplete(event:Event)
{
	trace("The sound has finished playing, play again.");
	channel = gameSound.play();
}

function betweenText(event:KeyboardEvent):void
{
	
	
	currentLevel++;
	
	
	levelChangeText.text = "Level " + currentLevel.toString() + " is about to begin" +
	"\nThe ball will now move faster" +
	"\nPress any button to begin the level";


	startLevel();
	

}


function debug(event:KeyboardEvent)
{
	trace("\n\n************************\n");
	trace("width = " + paddle.width);
	trace("height = " + paddle.height);
	trace("x = " + paddle.x);
	trace("y = " + paddle.y);
	trace("button = " + event.keyCode);
	trace("previousState = " + previousState);
	trace("currentState = " + currentState);
}